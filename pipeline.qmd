```         
---
title: "pipeline"
format: html
---
```

# Fetch Data from XMart
```{r}
base_url <- "https://xmart-api-public.who.int/WASHMART/GLAAS_EN_2?$format=csv"
output_file <- here::here("data-raw", "glaas.csv")

# Run the fetch_csv_r function
source(here::here("data-raw", "odata_utils.R"))

# fetch_odata(base_url, filter = list(Time = c(2021)), top = 20, skip=80, out_file = output_file)
fetch_odata(base_url, out_file = output_file)
```

# Washr pipeline
```{r}
# USER SETUP
root_name <- basename(here::here())
github_user <- "openwashdata"

# CONSTANTS
data_name <- paste0(root_name, ".csv")
data_raw_path <- here::here("data-raw", data_name)
dictionary_path <-  here::here("data-raw", "dictionary.csv")
data_path <- here::here("inst", "extdata", data_name)
```
```{r}
devtools::install_github("openwashdata/washr")
library(washr)
setup_rawdata()
```
```{r}
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
library(usethis)
library(fs)
library(here)
library(readr) # !
library(dplyr)

# Read data --------------------------------------------------------------------
data_in <- readr::read_csv(data_raw_path)

# Tidy data --------------------------------------------------------------------
data_out_coarse <- data_in |> 
    select(-(Lang:ParentLocTypeText)) |> 
    select(-starts_with("Sys")) |> 
    select(-starts_with("Com")) |> 
    select(-contains("Seq")) |> 
    select(-(UoM:X_RecordID))

data_out_medium <- data_out_coarse |> 
    select(-(FID:GrandParent)) |> 
    select(-(Parent)) |> 
    select(-(LocType:Loc)) |> 
    select(-(TimeType:TimeTypeText)) |> 
    select(-(DataYear:IsComparable)) |> 
    select(-(IsLatest)) |> 
    select(-(starts_with("Dim") & ends_with("Type"))) |> 
    select(-(starts_with("Dim") & ends_with("Val"))) |> 
    select(-(ValCodeNum:ValAmount))

data_out_fine <- data_out_medium |> 
    select(-(Ind:IndText)) |> 
    select(-(starts_with("Dim") & ends_with("TypeText")))

glaas <- data_out_fine

excluded_cols <- setdiff(names(data_in), names(glaas))
cat("Excluded columns:\n", paste(excluded_cols, collapse = ", "))

# Export Data ------------------------------------------------------------------
usethis::use_data(glaas, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(glaas, data_path)
```

```{r}
setup_dictionary()
```
```{python}
r.data_path
```
```{python}
import os
import json
from gendict.gendict import core

config_path = os.path.join(os.path.expanduser("~"), 'config.json')

with open(config_path, 'r') as file:
    config = json.load(file)

context, response, descriptions = core.gendict(config["HELMHOLTZ_API_KEY"],
                                               r.data_path, 
                                               max_unique_values=5, 
                                               model=0, 
                                               temperature=0, 
                                               top_p=0.5, 
                                               max_tokens=999, 
                                               debug=True)
print(f"Context:\n{context}\n\nResponse:\n{response}\n\nDescriptions:\n{descriptions}")

if descriptions:
    core.upload_descriptions_from_json(descriptions, in_file="data-raw/dictionary.csv")
```

```{r}
#' Set up roxygen documentation for all tidy data sets using the dictionary
#'
#' @description
#' Creates or updates Roxygen documentation for all tidy data sets found
#' in the dictionary file.
#'
#' When first run, this function creates the Roxygen documentation with placeholders
#' for the title and description field. The dictionary should include columns for
#' directory, file name, variable name, variable type, and description. This
#' function generates Roxygen comments with this information, facilitating
#' consistent and thorough documentation for your data sets.
#'
#' When re-run this function, this function updates only the variable description entries
#' in the Roxygen documentation files within R/ directory. The title and description fields remain
#' unchanged.
#'
#' @returns NULL. This function creates documentation files inside "R/". Error if
#' tidy data cannot be found.
#'
#' @export
#'
#' @examples
#' \dontshow{
#' temppkg <- tempdir()
#' devtools::create(temppkg, open=FALSE)
#' .old_wd <- setwd(temppkg)
#' }
#' \dontrun{
#' setup_dictionary()
#' # Once the dictionary is created, go to data-raw/dictionary.csv and complete the column description.
#' setup_roxygen()
#' }
#' \dontshow{
#' setwd(.old_wd)
#' }
#'
setup_roxygen <- function(title = "Title goes here ...", description = "Description here ...") {
  # Check dictionary existence
  input_file_path <- file.path(getwd(), "data-raw", "dictionary.csv")
  if (!file.exists(input_file_path)) {
    usethis::ui_stop("Data dictionary does not exist in the data-raw/ directory. Please set up the raw data or create a dictionary first.")
  }
  # Check R/ existence
  output_file_dir <- file.path(getwd(), "R")
  if (!dir.exists(output_file_dir)) {
    usethis::use_r(open = FALSE)
  }
  # Check data/ existence
  tidy_datasets <- list.files(path = file.path(getwd(), "data"))
  num_tidy_datasets <- length(tidy_datasets)
  # Write roxygen doc for each tidy dataset
  if (num_tidy_datasets == 0){
    usethis::ui_stop("No tidy data sets are available in the data/ directory.
                     Please complete data processing and export tidy data first.")
  } else {
    for (d in tidy_datasets){
      # Check if the file ends with .rda
      if (grepl("\\.rda$", d)) {
        # Update output_file_path to have the same name as df_name with .R extension
        df_name <- strsplit(basename(file.path(d)), ".rda")[[1]]
        output_file_path <- file.path(output_file_dir, paste0(df_name, ".R"))
        generate_roxygen_docs(input_file_path = input_file_path,
                              output_file_path = output_file_path,
                              title = title,
                              description = description,
                              df_name = df_name)
        usethis::ui_todo("Please write the title and description for \n {usethis::ui_value(output_file_path)}")
      }
    }
  }
}

#' Generate roxygen2 documentation from a CSV file
#'
#' This function takes a CSV table with columns `variable_name` and `description` as input,
#' optionally filters it by `variable_name`, and outputs roxygen2 documentation for `\describe` and `\item`.
#'
#' @param input_file_path Path to the input CSV file.
#' @param output_file_path Path to the output file that will contain the roxygen2 documentation.
#' @param df_name Optional name of the variable to filter the input dataframe by. Default is NULL.
#'
#' @returns Character string of a generated roxygen documentation.
#'
#' @export
#'
#' @examples \dontrun{
#' # Generate roxygen2 documentation from example.csv
#' generate_roxygen_docs("example.csv", "output.R")
#' # Generate roxygen2 documentation from example.csv for a specific variable name
#' generate_roxygen_docs("example.csv", "output.R", df_name = "specific_variable")
#' }
#'
generate_roxygen_docs <- function(input_file_path, output_file_path, title, description, df_name=NULL){
  # Read input CSV file
  dict <- utils::read.csv(input_file_path)
  ## If an empty csv should quit with error: Cannot generate roxygen file with an empty dictionary
  # Check if df_name is provided and not NULL, then filter input_df
  dict <- subset(dict, dict$file_name == paste0(df_name, ".rda"))
  if (file.exists(output_file_path)) {
    head <- get_roxygen_head(output_file_path)
  } else {
    head <- create_roxygen_head(df_name, title, description)
  }
  body <- create_roxygen_body(dict)
  output <- c(head, body)
  # Label dataset
  output <- c(output, paste0('"', df_name, '"'))
  # Write output to file
  writeLines(output, output_file_path)
  return(output)
}

create_roxygen_head <- function(df_name, title, description) {
  # Create title and description
  roxygen_head <- c(paste0("#' ", df_name, ": ", title),
                    "#' ",
                    paste0("#' ", description),
                    "#' ")
  return(roxygen_head)
}

get_roxygen_head <- function(roxygen_file_path){
  roxygen_head <- character()
  roxygen_text <- readLines(roxygen_file_path)
  i <- 1
  line <- roxygen_text[1]
  while (!startsWith(line, prefix = "#' @format")) {
    roxygen_head <- c(roxygen_head, roxygen_text[i])
    i <- i+1
    line <- roxygen_text[i]
  }
  return(roxygen_head)
}

load_object <- function(file) {
  tmp_env <- new.env()
  load(file = file, envir = tmp_env)
  tmp_env[[ls(tmp_env)[1]]]
}

create_roxygen_body <- function(dict){
  # Create format line
  dataobj <- file.path(getwd(), "data", dict$file_name[1])
  n_rows <- nrow(load_object(dataobj)) #TODO: Load the data object
  n_vars <- nrow(dict)
  format_line <- paste0("#' @format A tibble with ", n_rows," rows and ", n_vars," variables")

  # Create \describe block
  block <- create_describe_block(dict)
  output <- c(format_line, block)
  return(output)
}

create_describe_block <- function(dict){
  block <- character()
  block <- c(block, paste0("#' ", "\\describe{"))

  # Iterate over input rows and create \item blocks
  for (i in seq_len(nrow(dict))) {
    variable_name <- dict[i, "variable_name"]
    description <- dict[i, "description"]

    # Create \item block
    item <- paste0("#'   ", "\\item{", variable_name, "}{", description, "}")

    # Append to output
    block <- c(block, item)
  }

  # Close \describe block
  block <- c(block, "#' }")
  return(block)
}
```

```{r}
title = "UN-Water Global Analysis and Assessment of Sanitation and Drinking-water"
description = "GLAAS provides policy- and decision-makers at all levels with reliable, easily accessible, comprehensive data on water, sanitation and hygiene (WASH) systems, including on governance, monitoring, human resources and finance. GLAAS monitors elements of WASH systems that are required to sustain and extend WASH services and systems to all, and especially to the most vulnerable population groups."
setup_roxygen(title = title, description = description)
```

Add title and description to R/ethord.R

```{r}
devtools::document()
devtools::check()
devtools::install()
```

```{r}
# Example authors
aut1 <- list(given = "Nicolo", family = "Massari", role = c("aut", "cre"), email = "nmassari@ethz.ch", ORCID = "0009-0006-8421-930X", affiliation="ETH Zurich")
aut2 <- list(given = "Jane", family = "Doe", role = "ctb", email = "jane.doe@example.com")
```

```{r}
aut <- aut1
usethis::use_author(
  given = aut$given, 
  family = aut$family, 
  role = aut$role, 
  email = aut$email,
  comment = c(ORCID=aut$ORCID)
)
```

```{r}

#' Update the DESCRIPTION file to conform with openwashdata standards
#'
#' @description
#' This function updates the DESCRIPTION file of an R package to comply with openwashdata standards.
#' It ensures that fields such as `License`, `Language`, `Date`, `URL`, and others are correctly specified.
#'
#' @param file Character. The file path to the DESCRIPTION file of the R package. Defaults to the current working directory.
#' @param github_user Character. The URL path to the GitHub user or organization that hosts the current package. Defaults to "https://github.com/openwashdata".
#'
#' @export
#'
#' @returns NULL. Update fields directly in DESCRIPTION file.
#' @examples
#' \dontrun{
#'  # Update DESCRIPTION file in the current package
#' update_description()
#'
#'  # Update DESCRIPTION file in a specific package
#' update_description(file = "path/to/your/package/DESCRIPTION")
#'
#'  # Update DESCRIPTION file with a specific GitHub user
#' update_description(github_user = "https://github.com/yourusername")
#' }
#'
#'
update_description <- function(github_user, title, description, file = ".", language="en-GB", lazydata="true"){
  if(!file.exists(file.path(getwd(), "DESCRIPTION"))){
    usethis::ui_stop("No DESCRIPTION file found!")
  }
  # package
  pkgname <- desc::desc_get("Package", file = file)[[1]]
  # title
  desc::desc_set("Title", title)
  # version
  # authors
  # description
  desc::desc_set("Description", description)
  # license
  usethis::use_ccby_license()
  # language
  desc::desc_set("Language", language, file = file)
  # depends
  # Other Fields
  desc::desc_set("LazyData", lazydata, file = file)
  desc::desc_set("Config/Needs/website", "rmarkdown", file = file)
  # Date
  desc::desc_set("Date",
                 Sys.Date(),
                 file = file)
  # URL
  desc::desc_set_urls(urls = c(paste0("https://github.com/", github_user, "/", pkgname)),
                      file = file)
  # Bug Reports
  desc::desc_set("BugReports",
                 paste0("https://github.com/", github_user, "/", pkgname, "/", "issues"),
                 file = file)
}
```

```{r}
update_description(github_user = github_user, title=title, description=description)
```

```{r}
devtools::document()
devtools::check()
devtools::install()
```

```{r}
add_metadata()
update_metadata()
add_creator(name=paste(aut$given, aut$last, sep=" "), 
            email=aut$email, 
            affiliation=aut$affiliation) # Get from use_author
generate_jsonld()
devtools::document()
devtools::check()
devtools::install()
```

Change templates, automatically run and compile.

```{r}
setup_readme()
```

Deleted manually the templates, automate github links, examples, etc...

```{r}
devtools::build_readme()
```

```{r}
setup_website()
devtools::document()
devtools::check()
devtools::install()
```

```{r}
doi = "10.5281/zenodo.15423460"
update_citation(doi)
```
MUST CHANGE: delete current doi and replace